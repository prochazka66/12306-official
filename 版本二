#include <iostream>
#include <iomanip>
#include <cstring>
#include <ctime>
#include <fstream>
#include <algorithm>

using namespace std;

time_t t = time(NULL);  //设置当前时间

int n = 0;  //总车次

void menu();

class bus   //车票车次类
{
public:
    int hour;                           //发车时间（时）
    int minute;                         //发车时间（分）
    char start_station[20];             //起始站
    char end_station[20];               //终点站
    double runtime;                     //行车时间
    int busload;                        //载客量
    int ys;                             //已售票
};

class sy                                 //管理系统类
{
private:
    bus bs;
public:
    void input();                       //录入车次信息
    void browse();                      //浏览车次信息
    void search_train();                //按车次查询
    void search_station2();             //按起点站查询
    void search_station();              //按终点站查询
    void sp();                          //购票
    void tp();                          //退票
    void delete_train();                //删除车次
    void change_train();                //修改车次信息
    void sort_tickets();                //排序函数  
    void display(int a);                //显示车次信息
    friend void save();                 //保存数据
    friend void read();                 //初始化，读取"data.txt"的数据
};

sy ticket[1000];

/* 将车次信息存储在文本文件data.txt中 */

void save()
{
    ofstream file("data.txt", ios::out);  // 使用 ios_base::out 模式以覆盖文件内容
    int i;
    for (i = 0; i < n; i++)
    {
        //file << i + 1 << " ";//序号
        file << ticket[i].bs.hour << " ";
        file << ticket[i].bs.minute << " ";
        file << ticket[i].bs.start_station << " ";
        file << ticket[i].bs.end_station << " ";
        file << ticket[i].bs.runtime << " ";
        file << ticket[i].bs.busload << " ";
        file << ticket[i].bs.ys << endl;
    }
    file.close();
    cout << "信息已存入文件" << endl;
}

/*  录入车次信息  */
void sy::input()
{
    cout << "输入发车点数和分钟:";
    cin >> ticket[n].bs.hour >> ticket[n].bs.minute;
    cout << "输入起站和终点站:";
    cin >> ticket[n].bs.start_station >> ticket[n].bs.end_station;
    cout << "输入运行时间:";
    cin >> ticket[n].bs.runtime;
    cout << "输入载客量:";
    cin >> ticket[n].bs.busload;
    cout << "输入已售票:";
    cin >> ticket[n].bs.ys;
    cout << "已经完成输入:" << endl;
    n++;
    save();
    menu();
}

/*  浏览车次信息  */
void sy::browse()
{
    // 读取系统时间
    tm* pt = localtime(&t);
    cout << "当前时间: " << setw(2) << pt->tm_hour << ":";
    cout << setw(2) << setfill('0') << pt->tm_min << endl;
    // 输出UI
    cout << "车次信息:" << endl;
    cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << "  \t状态" << endl;
    int j;
    for (j = 0; j < n; j++)
    {
        ticket[j].display(j + 1);
        cout << "\t\t";
        if (ticket[j].bs.hour < pt->tm_hour ||
            (ticket[j].bs.hour == pt->tm_hour && ticket[j].bs.minute <= pt->tm_min))
        {
            cout << "此班已发出" << endl;
        }
        else
        {
            cout << "此班未发出" << endl;
        }
    }
    menu();
}

/*  显示  */
void sy::display(int a)
{
    cout << a << "\t" << bs.hour << ":";
    if (bs.minute == 0)
    {
        cout << "00";
    }
    else
    {
        cout << bs.minute;
    }
    cout << "\t\t" << bs.start_station << "\t\t" << bs.end_station << "\t\t" << bs.runtime << "\t\t" << bs.busload << "\t\t" << bs.ys;
}

/* 按车次查询  */
void sy::search_train()
{
    int s;
    cout << "输入要查询的车次: ";
    cin >> s;
    if (s > n)
    {
        cout << "抱歉，没有此班车";
    }
    else
    {
        cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << "  \t状态" << endl;
        cout << s << "\t" << ticket[s - 1].bs.hour << ":" << ticket[s - 1].bs.minute << "\t\t" << ticket[s - 1].bs.start_station << "\t\t" << ticket[s - 1].bs.end_station
            << "\t\t" << ticket[s - 1].bs.runtime << "\t\t" << ticket[s - 1].bs.busload << "\t\t" << ticket[s - 1].bs.ys;
        tm* pt = localtime(&t);
        cout << "\t\t";
        if (ticket[s].bs.hour < pt->tm_hour ||
            (ticket[s].bs.hour == pt->tm_hour && ticket[s].bs.minute <= pt->tm_min))
        {
            cout << "此班已发出" << endl;
        }
        else
        {
            cout << "此班未发出" << endl;
        }
    }
    menu();
}

/*按起点站查询*/
void sy::search_station2()
{
    char s[20];
    int flag = 0;
    cout << "要查询的起点站: ";
    cin >> s;
    int j;
    cout << "查询结果:" << endl;
    int shuzi = 0;                                 //用来判断是否有起点站为输入的
    for (j = 0; j < n; j++)
    {
        if (strcmp(s, ticket[j].bs.start_station) == 0)
        {
            shuzi++;
        }
        if (shuzi != 0 && strcmp(s, ticket[j].bs.start_station) == 0)
        {
            cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << "  \t状态" << endl;
            cout << j + 1 << "\t" << ticket[j].bs.hour << ":" << ticket[j].bs.minute << "\t\t" << ticket[j].bs.start_station << "\t\t" << ticket[j].bs.end_station
                << "\t\t" << ticket[j].bs.runtime << "\t\t" << ticket[j].bs.busload << "\t\t" << ticket[j].bs.ys;
            int p = j;
            tm* pt = localtime(&t);
            cout << "\t\t";
            if (ticket[p].bs.hour < pt->tm_hour ||
                (ticket[p].bs.hour == pt->tm_hour && ticket[p].bs.minute <= pt->tm_min))
            {
                cout << "此班已发出" << endl;
            }
            else
            {
                cout << "此班未发出" << endl;
            }
        }
    }
    if (shuzi == 0)
    {
        cout << "抱歉，没有此起点站";
    }
    shuzi = 0;
    menu();
}

/*  按终点站查询  */
void sy::search_station()
{
    char s[20];
    int flag = 0;
    cout << "要查询的终点站: ";
    cin >> s;
    int j;
    cout << "查询结果:" << endl;
    int shuzi2 = 0;
    for (j = 0; j < n; j++)
    {

        if (strcmp(s, ticket[j].bs.end_station) == 0)
        {
            shuzi2++;
        }
        if (strcmp(s, ticket[j].bs.end_station) == 0 && shuzi2 != 0)
        {
            cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << "  \t状态" << endl;
            cout << j + 1 << "\t" << ticket[j].bs.hour << ":" << ticket[j].bs.minute << "\t\t" << ticket[j].bs.start_station << "\t\t" << ticket[j].bs.end_station
                << "\t\t" << ticket[j].bs.runtime << "\t\t" << ticket[j].bs.busload << "\t\t" << ticket[j].bs.ys;
            tm* pt = localtime(&t);
            cout << "\t\t";
            if (ticket[j].bs.hour < pt->tm_hour ||
                (ticket[j].bs.hour == pt->tm_hour && ticket[j].bs.minute <= pt->tm_min))
            {
                cout << "此班已发出" << endl;
            }
            else
            {
                cout << "此班未发出" << endl;
            }
        }
    }
    if (shuzi2 == 0)
    {
        cout << "抱歉，没有此终点站";
    }
    shuzi2 = 0;
    menu();
}

void read()
{
    ifstream file("data.txt");  // 使用输入模式打开文件
    if (!file.is_open())
    {
        cout << "文件打开失败" << endl;
        return;
    }
    while (file >> ticket[n].bs.hour >> ticket[n].bs.minute >> ticket[n].bs.start_station
        >> ticket[n].bs.end_station >> ticket[n].bs.runtime >> ticket[n].bs.busload >> ticket[n].bs.ys)
    {
        n++;
    }
    file.close();
}

/*  售票  */
void sy::sp()
{
    int flag = 0;
    int a;
    cout << "输入所购票班次号: ";
    cin >> a;
    cout << "班次信息如下" << endl;
    cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << endl;
    cout << a << "\t" << ticket[a - 1].bs.hour << ":" << ticket[a - 1].bs.minute << "\t\t" << ticket[a - 1].bs.start_station << "\t\t" << ticket[a - 1].bs.end_station
        << "\t\t" << ticket[a - 1].bs.runtime << "\t\t" << ticket[a - 1].bs.busload << "\t\t" << ticket[a - 1].bs.ys << endl;
    tm* pt = localtime(&t);
    if (ticket[a - 1].bs.ys < ticket[a - 1].bs.busload)
    {
        if (ticket[a - 1].bs.hour > pt->tm_hour)
        {
            flag = 1;
        }
        else
        {
            if (ticket[a - 1].bs.hour == pt->tm_hour && ticket[a - 1].bs.minute > pt->tm_min)
            {
                flag = 1;
            }
        }
    }

    if (flag == 1)
    {
        cout << "购票成功" << endl;
        ticket[a - 1].bs.ys++;
    }
    else if (ticket[a - 1].bs.ys < ticket[a - 1].bs.busload)
    {
        cout << "票已售完" << endl;
    }
    else
    {
        cout << "车已经开出";
    }
}

/*  退票  */
void sy::tp()
{
    int a;
    cout << "退票的车次: ";
    cin >> a;
    cout << "班次信息如下" << endl;
    cout << "班次号" << "\t发车时间" << "\t起始站" << "  \t终点站" << "  \t行车时间" << "  \t载客量" << "  \t已售票" << endl;
    cout << a << "\t" << ticket[a - 1].bs.hour << ":" << ticket[a - 1].bs.minute << "\t\t" << ticket[a - 1].bs.start_station << "\t\t" << ticket[a - 1].bs.end_station
        << "\t\t" << ticket[a - 1].bs.runtime << "\t\t" << ticket[a - 1].bs.busload << "\t\t" << ticket[a - 1].bs.ys << endl;
    tm* pt = localtime(&t);
    int flag = 0;
    if (ticket[a - 1].bs.hour > pt->tm_hour)
    {
        flag = 1;
    }
    else
    {
        if (ticket[a - 1].bs.hour == pt->tm_hour && ticket[a - 1].bs.minute > pt->tm_min)
        {
            flag = 1;
        }
    }
    if (flag == 1)
    {
        cout << "退票成功" << endl;
        ticket[a - 1].bs.ys--;
    }
    else
    {
        cout << "退票失败" << endl;
    }
    menu();
}

/* 产出车次记录的函数 */
void sy::delete_train()
{
    char start[20], end[20];
    cout << "输入要删除的起点站和终点站: ";
    cin >> start >> end;

    int foundIndices[1000];
    int foundCount = 0;                     //用来为被筛选出来的数据排序

    // 查找匹配的车次记录
    for (int i = 0; i < n; i++)
    {
        if (strcmp(ticket[i].bs.start_station, start) == 0 && strcmp(ticket[i].bs.end_station, end) == 0)// 用比较函数找到起点终点都符合所有信息
        {
            foundIndices[foundCount++] = i;       //对应记录本来的顺序
        }
    }

    if (foundCount == 0)
    {
        cout << "没有找到匹配的车次记录" << endl;
        return;
    }

    cout << "找到以下匹配的车次记录:" << endl;
    cout << "序号\t班次号\t发车时间\t起始站\t\t终点站\t\t行车时间\t载客量\t\t已售票" << endl;

    for (int i = 0; i < foundCount; i++)
    {
        cout << i + 1 << "\t";                                                                      //输出新序号
        ticket[foundIndices[i]].display(foundIndices[i] + 1);                                       //输出车票信息
        cout << endl;
    }

    int choice;                                                                                     //选择其中之一进行删除
    cout << "输入要删除的记录序号: ";
    cin >> choice;

    if (choice < 1 || choice > foundCount)
    {
        cout << "抱歉，没有这个选项" << endl;
        return;
    }

    int deleteIndex = foundIndices[choice - 1];

    // 删除记录
    for (int i = deleteIndex; i < n - 1; i++)
    {
        ticket[i] = ticket[i + 1];                                                                     //用覆盖法删除数据
    }
    n--;

    cout << "车次记录删除成功" << endl;
    save();
    menu();
}

//修改车次记录的函数
void sy::change_train()
{
    char start[20], end[20];
    cout << "输入要修改车次起点站和终点站: ";
    cin >> start >> end;

    int foundIndices[1000];
    int foundCount = 0;

    // 查找匹配的车次记录
    for (int i = 0; i < n; i++)
    {
        if (strcmp(ticket[i].bs.start_station, start) == 0 && strcmp(ticket[i].bs.end_station, end) == 0)
        {
            foundIndices[foundCount++] = i;
        }
    }

    if (foundCount == 0)
    {
        cout << "没有找到匹配的车次记录" << endl;
        return;
    }

    cout << "找到以下匹配的车次记录:" << endl;
    cout << "序号\t班次号\t发车时间\t起始站\t\t终点站\t\t行车时间\t载客量\t\t已售票" << endl;
    for (int i = 0; i < foundCount; i++)
    {
        cout << i + 1 << "\t";
        ticket[foundIndices[i]].display(foundIndices[i] + 1);
        cout << endl;
    }

    int choice;
    cout << "输入要修改的记录序号: ";
    cin >> choice;

    if (choice < 1 || choice > foundCount)
    {
        cout << "无效的选择" << endl;
        return;
    }

    int deleteIndex = foundIndices[choice - 1];

    // 修改记录
    for (int i = deleteIndex; i < n - 1; i++)
    {
        cout << "输入发车点数和分钟:";
        cin >> ticket[i].bs.hour >> ticket[i].bs.minute;
        cout << "输入起站和终点站:";
        cin >> ticket[i].bs.start_station >> ticket[i].bs.end_station;
        cout << "输入运行时间:";
        cin >> ticket[i].bs.runtime;
        cout << "输入载客量:";
        cin >> ticket[i].bs.busload;
        cout << "输入已售票:";
        cin >> ticket[i].bs.ys;
        cout << "已经完成输入:" << endl;
        //ticket[i] = ticket[i + 1];
    }
    //n--;
    cout << "车次记录修改成功" << endl;
    save();
    menu();
}
/*排序函数*/
void sy::sort_tickets()
{
    int choice;
    cout << "选择排序方式: 1. 车次号 2. 发车时间 3. 起点站 4. 终点站: ";
    cin >> choice;

    switch (choice)
    {
    case 1: // 按车次号排序
        sort(ticket, ticket + n, [](sy& a, sy& b) {
            return strcmp(a.bs.start_station, b.bs.start_station) < 0;
            });
        break;
    case 2: // 按发车时间排序
        sort(ticket, ticket + n, [](sy& a, sy& b) {
            if (a.bs.hour == b.bs.hour)
                return a.bs.minute < b.bs.minute;
            return a.bs.hour < b.bs.hour;
            });
        break;
    case 3: // 按起点站排序
        sort(ticket, ticket + n, [](sy& a, sy& b) {
            return strcmp(a.bs.start_station, b.bs.start_station) < 0;
            });
        break;
    case 4: // 按终点站排序
        sort(ticket, ticket + n, [](sy& a, sy& b) {
            return strcmp(a.bs.end_station, b.bs.end_station) < 0;
            });
        break;
    default:
        cout << "无效的选择" << endl;
        return;
    }

    cout << "排序完成!" << endl;
    save();
}

/*主菜单*/
void menu()
{
    cout << endl;
    cout << "                        ~~~~~~~~~~~~~~~~~~~~~~~欢迎使用车票管理系统！~~~~~~~~~~~~~~~~~~~~~~~                             " << endl;
    cout << "                                            ==========================                                                   " << endl;
    cout << "                                               1 .录 入 车 票 信 息                                                      " << endl;
    cout << "                                               2 .浏 览 车 票 信 息                                                      " << endl;
    cout << "                                               3 .删 除 或 修 改 车 次 记 录                                             " << endl;
    cout << "                                               4 .排 序 车 票 信 息                                                      " << endl;
    cout << "                                               5 .查 询 车 票 信 息                                                      " << endl;
    cout << "                                               6 .购 票                                                                  " << endl;
    cout << "                                               7 .退 票                                                                  " << endl;
    cout << "                                               8 .退 出 系 统                                                            " << endl;
}
int main()
{
    menu();
    read();
    int m;
    int f;
    int z = 1;
    sy p;
    while (z == 1)
    {
        cout << "\n请选择: ";
        cin >> m;
        switch (m)
        {
        case 1: p.input(); break;                                    //录入车票信息
        case 2: p.browse(); break;                                   //浏览车票信息
        case 3:                                                      // 删除或者修改车次记录功能
            int a;
            cout << "请选择是删除还是修改" << endl;
            cout << "删除输入1，修改输入2" << endl;
            cin >> a;
            if (a == 1)
            {
                ticket[0].delete_train(); break;
            }
            else
            {
                ticket[0].change_train(); break;
            }
        case 4: ticket[0].sort_tickets(); break;                     // 排序车次信息功能
        case 6: p.sp(); break;                                       //购票
        case 7: p.tp(); break;                                       //退票
        case 8: z = 0; break;                                        //退出系统
        case 5:                                                      //查询车票信息功能！
            cout << "查询方式(按车次查询输入1，按起点站查询输入2，按终点站查询输入3):";
            cin >> f;
            if (f == 1)
            {
                p.search_train();
            }
            if (f == 3)
            {
                p.search_station();
            }
            if (f == 2)
            {
                p.search_station2();
            }
        }
    }
    return 0;
}
